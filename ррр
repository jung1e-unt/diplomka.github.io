                                return Json(new { success = false, message = "–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ –ª–æ–≥: " + ex.Message });
                            }
                            return Json(new { success = true, message = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞" });
                        }
                    }

                }
            }
        }
        else
            return Json(new { success = false, message = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });

    }
    return Json(new { success = false, message = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });

}

<script>
    document.getElementById("reg_user").addEventListener("click", async function (e) {
        e.preventDefault();

        const checkUrl = "@Url.Action("Check_in_db", "Home")";
        const registrationUrl = "@Url.Action("Registration", "Home")";
        const updateUrl = "@Url.Action("Update_user", "Home")";

        const user = {
            USER_ID: document.getElementById("USER_ID").value,
            LAST_NAME: document.getElementById("LAST_NAME").value,
            FIRST_NAME: document.getElementById("FIRST_NAME").value,
            PATRONYMIC: document.getElementById("PATRONYMIC").value,
            PASS_USER: document.getElementById("PASS_USER").value,
            CONFIRM_PASS: document.getElementById("PASSWORD_RE").value,
            TYPE_LEVEL: document.getElementById("TYPE_LEVEL").value,
            SHOP_ID: document.getElementById("SHOP_ID").value,
            OTD_ID: document.getElementById("OTD_ID").value,
            STATUS_PC: document.getElementById("STATUS_PC").value,
            STATUS_ID: document.getElementById("STATUS_ID").value,
            N_OTK: document.getElementById("N_OTK").value
        };

        try {
            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const checkResponse = await fetch(checkUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(user)
            });

            if (!checkResponse.ok) {
                throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }

            const checkResult = await checkResponse.json();
            const isUpdate = checkResult.exists === true;

            // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if (!isUpdate) {
                if (!user.PASS_USER || !user.CONFIRM_PASS) {
                    showCustomAlert("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è");
                    return;
                } else if (user.PASS_USER !== user.CONFIRM_PASS) {
                    showCustomAlert("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
                    return;
                }
            }

            // 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const targetUrl = isUpdate ? updateUrl : registrationUrl;

            const saveResponse = await fetch(targetUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(user)
            });

            if (!saveResponse.ok) {
                throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
            }

            const result = await saveResponse.json();

            alert(result.message);

            if (result.success) {
                clearFormInputs();
            }

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞:", error);
            showCustomAlert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: " + error.message);
        }
    });

    function clearFormInputs() {
        document.querySelectorAll("input").forEach(el => el.value = "");
        document.querySelectorAll("select").forEach(el => el.selectedIndex = 0);
    }
</script>
.....



<div id="passwordModal_admin" class="modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="changePasswordForm">
                <h3>–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</h3>

                <input id="tabelNum" value="@ViewBag.Tabel" style="display: none;" /><br>

                <div class="labelpass">
                    <label class="labelpasslabel">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
                    <input class="labelpassinput" type="password" id="newPassword" /><br>
                    <label class="labelpasslabel">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
                    <input class="labelpassinput" type="password" id="confirmPassword" /><br>
                </div>

                <p id="errorMessage" style="color: red; display: none;">–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç</p>

                <button type="submit" id="savePasswordBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            </form>
            <button id="cancelBtn">–û—Ç–º–µ–Ω–∞</button>
        </div>
    </div>
</div>

<!-- üî∏ Custom Alert Modal -->
<div id="customAlert" class="modal">
    <div class="modal-dialog">
        <div class="modal-content alert-box">
            <div id="customAlertIcon" class="alert-icon">‚ÑπÔ∏è</div>
            <h3 id="customAlertTitle"></h3>
            <p id="customAlertMessage"></p>
            <button id="customAlertCloseBtn">–û–ö</button>
        </div>
    </div>
</div>

<style>
    /* –û–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª–∫–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è */
    .labelpass {
        text-align: center;
        line-height: 25px;
    }

    .labelpass label {
        align-self: center;
    }

    .labelpass input {
        float: inline-end;
    }

    /* üîπ Custom Alert Modal */
    #customAlert {
        display: none;
        position: fixed;
        z-index: 9999;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.6);
        justify-content: center;
        align-items: center;
    }

    #customAlert .modal-dialog {
        position: relative;
        margin: 10% auto;
        max-width: 400px;
    }

    .alert-box {
        text-align: center;
        background: white;
        border-radius: 10px;
        padding: 25px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        animation: fadeIn 0.3s ease;
    }

    .alert-icon {
        font-size: 40px;
        margin-bottom: 10px;
    }

    #customAlertCloseBtn {
        margin-top: 15px;
        padding: 8px 18px;
        border: none;
        border-radius: 6px;
        background: #007bff;
        color: white;
        cursor: pointer;
        transition: background 0.2s;
    }

    #customAlertCloseBtn:hover {
        background: #0056b3;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: scale(0.95); }
        to { opacity: 1; transform: scale(1); }
    }
</style>

<script>
    const modal_passw = document.getElementById("passwordModal_admin");
    const openBtn = document.getElementById("parol");
    const closeBtn = document.querySelector(".close");
    const cancelBtn = document.getElementById("cancelBtn");

    if (openBtn) openBtn.onclick = () => modal_passw.style.display = "block";
    if (closeBtn) closeBtn.onclick = () => modal_passw.style.display = "none";
    cancelBtn.onclick = () => modal_passw.style.display = "none";

    // üî∏ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    function showCustomAlert(type, message, callback) {
        const alertModal = document.getElementById("customAlert");
        const alertTitle = document.getElementById("customAlertTitle");
        const alertMessage = document.getElementById("customAlertMessage");
        const alertIcon = document.getElementById("customAlertIcon");
        const alertCloseBtn = document.getElementById("customAlertCloseBtn");

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        if (type === "success") {
            alertTitle.textContent = "‚úÖ –£—Å–ø–µ—à–Ω–æ";
            alertIcon.textContent = "‚úÖ";
            alertTitle.style.color = "green";
        } else if (type === "error") {
            alertTitle.textContent = "‚ùå –û—à–∏–±–∫–∞";
            alertIcon.textContent = "‚ùå";
            alertTitle.style.color = "red";
        } else {
            alertTitle.textContent = "‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ";
            alertIcon.textContent = "‚ÑπÔ∏è";
            alertTitle.style.color = "black";
        }

        alertMessage.textContent = message;
        alertModal.style.display = "flex";

        alertCloseBtn.onclick = () => {
            alertModal.style.display = "none";
            if (callback) callback();
        };
    }

    document.addEventListener("DOMContentLoaded", function () {
        const saveBtn = document.getElementById("savePasswordBtn");
        const newPassword = document.getElementById("newPassword");
        const confirmPassword = document.getElementById("confirmPassword");
        const tabelNum = document.getElementById("tabelNum");
        const errorMessage = document.getElementById("errorMessage");
        const role = document.body.getAttribute("data-role");

        if (role !== "admin") {
            tabelNum.setAttribute("readonly", true);
        }

        saveBtn.addEventListener("click", function (e) {
            e.preventDefault();

            const newVal = newPassword.value.trim();
            const confirmVal = confirmPassword.value.trim();
            const tabelVal = tabelNum.value.trim();

            if (!newVal || !confirmVal) {
                showCustomAlert("error", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
                return;
            }

            if (newVal !== confirmVal) {
                showCustomAlert("error", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
                return;
            }

            const url = "@Url.Action("ChangePass", "Home")";
            fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    tabelNum: tabelVal,
                    newPassword: newVal
                })
            })
            .then(async response => {
                const data = await response.json();
                if (!response.ok || !data.success) {
                    throw new Error(data.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
                }

                showCustomAlert("success", data.message, () => {
                    modal_passw.style.display = "none";
                });
            })
            .catch(error => {
                showCustomAlert("error", error.message);
            });
        });

        confirmPassword.addEventListener("input", function () {
            if (newPassword.value.trim() === confirmPassword.value.trim()) {
                errorMessage.style.display = "none";
            }
        });
    });
</script>
