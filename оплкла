<!-- ========== Кастомный алерт (HTML + стили) ========== -->
<style>
    #customAlertOverlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.6);
        z-index: 9999;
        justify-content: center;
        align-items: center;
    }

    .customAlertBox {
        background-color: #fff;
        color: #333;
        padding: 30px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 0 20px rgba(0,0,0,0.5);
        width: 600px;
        height: 200px;
        font-family: sans-serif;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .customAlertTitle {
        margin: 0;
        font-size: 20px;
        font-weight: 600;
    }

    .customAlertIcon {
        font-size: 36px;
        margin-bottom: 8px;
    }

    .customAlertMessage {
        margin-top: 6px;
    }

    .customAlertCloseButton {
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .customAlertCloseButton:hover {
        background-color: #0056b3;
    }
</style>

<div id="customAlertOverlay">
    <div class="customAlertBox" role="dialog" aria-modal="true">
        <div id="customAlertIcon" class="customAlertIcon">ℹ️</div>
        <h3 id="customAlertTitle" class="customAlertTitle">Сообщение</h3>
        <div id="customAlertMessage" class="customAlertMessage"></div>
        <button id="customAlertCloseButton" class="customAlertCloseButton">OK</button>
    </div>
</div>

<!-- ========== JS: showCustomAlert + обработчики запросов ========== -->
<script>
    // Показать/закрыть кастомный алерт
    function showCustomAlert(type, message, options = {}) {
        // type: 'success' | 'error' | 'info'
        const overlay = document.getElementById('customAlertOverlay');
        const iconEl = document.getElementById('customAlertIcon');
        const titleEl = document.getElementById('customAlertTitle');
        const messageEl = document.getElementById('customAlertMessage');
        const closeBtn = document.getElementById('customAlertCloseButton');

        // Настройка внешнего вида
        if (type === 'success') {
            iconEl.textContent = '✅';
            titleEl.textContent = 'Успех';
            titleEl.style.color = '#28a745';
        } else if (type === 'error') {
            iconEl.textContent = '❌';
            titleEl.textContent = 'Ошибка';
            titleEl.style.color = '#dc3545';
        } else {
            iconEl.textContent = 'ℹ️';
            titleEl.textContent = 'Информация';
            titleEl.style.color = '#333';
        }

        messageEl.textContent = message || '';
        overlay.style.display = 'flex';

        // закрытие
        function closeAndCallback() {
            overlay.style.display = 'none';
            if (typeof options.callback === 'function') options.callback();
            // удалить слушатель, чтобы не навесились дубли
            closeBtn.removeEventListener('click', closeAndCallback);
        }

        closeBtn.addEventListener('click', closeAndCallback);

        // авто-скрытие, если указано (ms)
        if (options.autoClose && typeof options.autoClose === 'number') {
            setTimeout(closeAndCallback, options.autoClose);
        }
    }

    function closeCustomAlert() {
        const overlay = document.getElementById('customAlertOverlay');
        overlay.style.display = 'none';
    }

    // =================== Помощник: безопасный парсинг ответа ===================
    async function parseResponseSafely(response) {
        // возвращает объект { ok: boolean, status: number, parsed: object|null, text: string }
        const result = { ok: response.ok, status: response.status, parsed: null, text: null };
        const txt = await response.text();
        result.text = txt;
        try {
            result.parsed = JSON.parse(txt);
        } catch (e) {
            result.parsed = null;
        }
        return result;
    }

    // =================== Обработчик кнопки регистрации / обновления ===================
    (function () {
        const btn = document.getElementById('reg_user');
        if (!btn) {
            console.warn('Кнопка #reg_user не найдена на странице');
            return;
        }

        btn.addEventListener('click', async function (e) {
            e.preventDefault();

            const checkUrl = '@Url.Action("Check_in_db", "Home")';
            const registrationUrl = '@Url.Action("Registration", "Home")';
            const updateUrl = '@Url.Action("Update_user", "Home")';

            const user = {
                USER_ID: document.getElementById("USER_ID")?.value || '',
                LAST_NAME: document.getElementById("LAST_NAME")?.value || '',
                FIRST_NAME: document.getElementById("FIRST_NAME")?.value || '',
                PATRONYMIC: document.getElementById("PATRONYMIC")?.value || '',
                PASS_USER: document.getElementById("PASS_USER")?.value || '',
                CONFIRM_PASS: document.getElementById("PASSWORD_RE")?.value || '',
                TYPE_LEVEL: document.getElementById("TYPE_LEVEL")?.value || '',
                SHOP_ID: document.getElementById("SHOP_ID")?.value || '',
                OTD_ID: document.getElementById("OTD_ID")?.value || '',
                STATUS_PC: document.getElementById("STATUS_PC")?.value || '',
                STATUS_ID: document.getElementById("STATUS_ID")?.value || '',
                N_OTK: document.getElementById("N_OTK")?.value || ''
            };

            console.log('Отправляем user для проверки:', user);

            try {
                // 1) Проверка существования пользователя
                const checkResponseRaw = await fetch(checkUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(user)
                });

                const checkResp = await parseResponseSafely(checkResponseRaw);
                console.log('Check response:', checkResp);

                if (!checkResponseRaw.ok && !checkResp.parsed) {
                    // сервер вернул ошибку и не JSON — показываем текст
                    showCustomAlert('error', `Ошибка при проверке пользователя: ${checkResp.text || checkResponseRaw.statusText}`);
                    return;
                }

                // ожидаем, что checkResp.parsed содержит { exists: true/false } или подобное
                const exists = checkResp.parsed && (checkResp.parsed.exists === true || checkResp.parsed.exists === 'true' || checkResp.parsed.exists == 1);
                const isUpdate = !!exists;
                console.log('isUpdate =', isUpdate);

                // 2) валидация паролей только при регистрации
                if (!isUpdate) {
                    if (!user.PASS_USER || !user.CONFIRM_PASS) {
                        showCustomAlert('error', 'Введите пароль и подтверждение пароля');
                        return;
                    }
                    if (user.PASS_USER !== user.CONFIRM_PASS) {
                        showCustomAlert('error', 'Пароли не совпадают');
                        return;
                    }
                }

                // 3) Отправляем запрос на регистрацию/обновление
                const targetUrl = isUpdate ? updateUrl : registrationUrl;
                console.log('Target URL:', targetUrl);

                const saveResponseRaw = await fetch(targetUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(user)
                });

                const saveResp = await parseResponseSafely(saveResponseRaw);
                console.log('Save response:', saveResp);

                // try to read result.message
                let message = (saveResp.parsed && (saveResp.parsed.message || saveResp.parsed.Message)) || saveResp.text || saveResponseRaw.statusText;
                let successFlag = (saveResp.parsed && (saveResp.parsed.success === true || saveResp.parsed.success === 'true')) || saveResponseRaw.ok;

                // if server returned JSON but success explicitly false — honor it
                if (saveResp.parsed && typeof saveResp.parsed.success !== 'undefined') {
                    successFlag = !!saveResp.parsed.success;
                }

                // Показываем сообщение
                if (successFlag) {
                    showCustomAlert('success', message || 'Успешно', { autoClose: 3500, callback: clearFormInputs });
                } else {
                    showCustomAlert('error', message || 'Ошибка при сохранении данных');
                }

            } catch (err) {
                console.error('Ошибка в обработчике reg_user:', err);
                showCustomAlert('error', 'Ошибка при обработке запроса: ' + (err.message || err));
            }
        });

        function clearFormInputs() {
            document.querySelectorAll('input').forEach(el => el.value = '');
            document.querySelectorAll('select').forEach(el => el.selectedIndex = 0);
        }
    })();
</script>